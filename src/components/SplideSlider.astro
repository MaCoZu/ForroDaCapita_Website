---
import '../styles/splide-custom.css'

interface Props {
  triggerIDs: string[]
  images: Array<{ id: string; url: string; alt?: string }>
  showCounter?: boolean
  prefix: string
  arrowPosition?: string
}

const {
  triggerIDs = [],
  images = [],
  showCounter = false,
  prefix = '',
  arrowPosition = '',
}:Props = Astro.props

const modalID = `${prefix ? `${prefix}_` : ''}modalID`
const modalContent = `${prefix ? `${prefix}_` : ''}modalContent`
const closeGallery = `${prefix ? `${prefix}_` : ''}closeGallery`
const mainSlider = `${prefix ? `${prefix}_` : ''}mainSlider`
const thumbnailSlider = `${prefix ? `${prefix}_` : ''}thumbnailSlider`
const mobileSlider = `${prefix ? `${prefix}_` : ''}mobileSlider`
---

<div
  id={modalID}
  class="fixed inset-0 z-[9999] hidden bg-base-100/60 backdrop-blur-md items-center flex justify-center mx-auto"
  data-trigger-ids={JSON.stringify(triggerIDs)}
  data-show-counter={showCounter}
  data-prefix={prefix}
>
  <!-- Close Button -->
  <button
    id={closeGallery}
    class="absolute top-1/20 right-1/12 z-[100] rounded-full p-2 transition-all duration-300 group"
    aria-label="Close gallery"
    onclick="event.stopPropagation()"
  >
    <svg
      width="40"
      height="40"
      class="w-5 h-5 sm:w-7 sm:h-7 text-primary-content group-hover:text-accent/90"
      fill="currentColor"
      stroke="currentColor"
      viewBox="0 0 512 512"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M437.5 386.6 306.9 256l130.6-130.6a36 36 0 1 0-50.9-50.9L256 205.1 125.4 74.5a36 36 0 1 0-50.9 50.9L205.1 256 74.5 386.6a36 36 0 1 0 50.9 50.9L256 306.9l130.6 130.6a36 36 0 1 0 50.9-50.9"
      ></path>
    </svg>
  </button>
  <div
    id={modalContent}
    class="relative my-8 overflow-hidden w-[95vw] md:w-1/3"
  >
    <!-- Desktop Layout -->
    <div class="hidden md:block">
      <!-- Main Slider -->
      <section
        id={mainSlider}
        class="splide mb-4 w-[95vw] lg:w-full flex justify-center mx-auto"
      >
        <div class="splide__arrows"></div>
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={`${image.url}?w=800&q=50`}
                    srcset={`${image.url}?w=480&q=40 480w, ${image.url}?w=768&q=50 768w, ${image.url}?w=1200&q=60 1200w`}
                    sizes="(max-width: 600px) 480px, (max-width: 1200px) 768px, 1200px"
                    loading="lazy"
                    alt={image.alt || 'Gallery image'}
                    class="w-full h-[75vh] object-contain"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>

      <!-- Thumbnails -->
      <section id={thumbnailSlider} class="splide flex justify-center mx-auto">
        <!-- Custom Arrows  -->
        <div class="splide__arrows">
          <button class="splide__arrow splide__arrow--prev">
            <svg
              xml:space="preserve"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 512 512"
              ><path
                d="m322.7 128.4 100.3 105c6 5.8 9 13.7 9 22.4s-3 16.5-9 22.4L322.7 383.6a29.6 29.6 0 0 1-43.2 0 33 33 0 0 1 0-45.2l48.2-50.4h-217c-17 0-30.7-14.3-30.7-32s13.7-32 30.6-32h217l-48.2-50.4a33 33 0 0 1 0-45.2 29.7 29.7 0 0 1 43.3 0"
              ></path></svg
            >
          </button>
          <button class="splide__arrow splide__arrow--next">
            <svg
              xml:space="preserve"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 512 512"
              ><path
                d="m322.7 128.4 100.3 105c6 5.8 9 13.7 9 22.4s-3 16.5-9 22.4L322.7 383.6a29.6 29.6 0 0 1-43.2 0 33 33 0 0 1 0-45.2l48.2-50.4h-217c-17 0-30.7-14.3-30.7-32s13.7-32 30.6-32h217l-48.2-50.4a33 33 0 0 1 0-45.2 29.7 29.7 0 0 1 43.3 0"
              ></path></svg
            ></button
          >
        </div>

        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={`${image.url}?w=200&q=40`}
                    alt={image.alt || 'Gallery thumbnail'}
                    class="w-full h-[15vh] object-cover cursor-pointer transition-opacity bg-transparent"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>
    </div>
    <!-- Mobile Layout -->
    <div class="block md:hidden w-full">
      <section
        id={mobileSlider}
        class={`splide mobile-splide max-w-[95vw] ${arrowPosition || 'h-[75vh]'} mx-auto`}
      >
        <!-- Custom Arrows  -->
        <div class="splide__arrows">
          <button class="splide__arrow splide__arrow--prev mobile-arrow">
            <svg
              xml:space="preserve"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 512 512"
              ><path
                d="m322.7 128.4 100.3 105c6 5.8 9 13.7 9 22.4s-3 16.5-9 22.4L322.7 383.6a29.6 29.6 0 0 1-43.2 0 33 33 0 0 1 0-45.2l48.2-50.4h-217c-17 0-30.7-14.3-30.7-32s13.7-32 30.6-32h217l-48.2-50.4a33 33 0 0 1 0-45.2 29.7 29.7 0 0 1 43.3 0"
              ></path></svg
            >
          </button>
          <button class="splide__arrow splide__arrow--next mobile-arrow">
            <svg
              xml:space="preserve"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 512 512"
              ><path
                d="m322.7 128.4 100.3 105c6 5.8 9 13.7 9 22.4s-3 16.5-9 22.4L322.7 383.6a29.6 29.6 0 0 1-43.2 0 33 33 0 0 1 0-45.2l48.2-50.4h-217c-17 0-30.7-14.3-30.7-32s13.7-32 30.6-32h217l-48.2-50.4a33 33 0 0 1 0-45.2 29.7 29.7 0 0 1 43.3 0"
              ></path></svg
            ></button
          >
        </div>
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={`${image.url}?w=800&q=50`}
                    alt={image.alt || 'Gallery image'}
                    class="w-full h-[75vh] max-w-[95vw] object-contain rounded-sm"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>
    </div>
  </div>
</div>

<script>
  import { Splide } from '@splidejs/splide'
import '@splidejs/splide/dist/css/splide.min.css'
import { addEnhancedModalClose } from '../scripts/modalUtils'

  document.addEventListener('DOMContentLoaded', () => {
    const modals =
      document.querySelectorAll<HTMLDivElement>('[data-trigger-ids]')
    modals.forEach((modal) => {
      const prefix = modal?.dataset?.prefix || ''
      // const modalID = `${prefix}${prefix ? '_' : ''}modalID`
      const modalContentID = `${prefix}${prefix ? '_' : ''}modalContent`
      const closeGalleryID = `${prefix}${prefix ? '_' : ''}closeGallery`
      const mainSliderID = `${prefix}${prefix ? '_' : ''}mainSlider`
      const thumbnailSliderID = `${prefix}${prefix ? '_' : ''}thumbnailSlider`
      const mobileSliderID = `${prefix}${prefix ? '_' : ''}mobileSlider`

      const modalContent = document.getElementById(modalContentID)
      const closeButton = document.getElementById(closeGalleryID)

      if (!modalContent || !closeButton) return

      const triggerIDs = JSON.parse(modal.dataset.triggerIds || '[]')
      const showCounter = modal.dataset.showCounter === 'true'

      const triggers = triggerIDs
        .map((id: string) => document.getElementById(id))
        .filter((el: string) => el !== null)

      let mainSliderInstance: Splide | null = null
      let thumbnailSliderInstance: Splide | null = null
      let mobileSliderInstance: Splide | null = null

      const initializeSliders = () => {
        // Clean up existing instances
        if (mainSliderInstance) {
          mainSliderInstance.destroy()
          mainSliderInstance = null
        }
        if (thumbnailSliderInstance) {
          thumbnailSliderInstance.destroy()
          thumbnailSliderInstance = null
        }
        if (mobileSliderInstance) {
          mobileSliderInstance.destroy()
          mobileSliderInstance = null
        }

        const mainSliderElement = document.getElementById(mainSliderID)
        const thumbnailSliderElement =
          document.getElementById(thumbnailSliderID)
        const mobileSliderElement = document.getElementById(mobileSliderID)

        // Desktop sliders
        if (mainSliderElement && thumbnailSliderElement) {
          mainSliderInstance = new Splide(`#${mainSliderID}`, {
            type: 'fade',
            perPage: 1,
            rewind: true,
            focus: 'center',
            gap: 0,
            pagination: false,
            arrows: false,
            keyboard: 'global',
          })

          thumbnailSliderInstance = new Splide(`#${thumbnailSliderID}`, {
            type: 'slide',
            perPage: 3,
            rewind: true,
            focus: 'center',
            trimSpace: true,
            drag: 'free',
            fixedWidth: 100,
            isNavigation: true,
            gap: 10,
            pagination: false,
            arrows: true,
            keyboard: 'global',
          })

          mainSliderInstance.sync(thumbnailSliderInstance)
          mainSliderInstance.mount()
          thumbnailSliderInstance.mount()
        }

        // Mobile slider
        if (mobileSliderElement) {
          mobileSliderInstance = new Splide(`#${mobileSliderID}`, {
            type: 'slide',
            drag: 'free',
            snap: true,
            rewind: true,
            pagination: false,
            arrows: true,
          })

          // Add counter for mobile if requested
          if (showCounter) {
            mobileSliderInstance?.on('mounted move', () => {
              const current = (mobileSliderInstance?.index ?? 0) + 1

              const total = mobileSliderInstance
                ? mobileSliderInstance.Components.Controller.getEnd() + 1
                : 1
              // Update or create counter
              let counter = mobileSliderElement.querySelector('.slide-counter')
              if (!counter) {
                counter = document.createElement('div')
                counter.className = 'slide-counter'
                mobileSliderElement.appendChild(counter)
              }
              counter.innerHTML = `<span class="current">${current}</span> / ${total}`
            })
          }

          mobileSliderInstance.mount()
        }
      }

      const closeModal = () => {
        modal.classList.add('hidden')
        document.body.style.overflow = ''
      }

      const openModal = () => {
        modal.classList.remove('hidden')
        document.body.style.overflow = 'hidden'
        initializeSliders()
        modal.focus()
      }

      // Simplified backdrop handler
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal()
        }
      })

      // Make sure this runs after DOM is ready
      if (modal && modalContent) {
        const isOpen = () => !modal.classList.contains('hidden')
        addEnhancedModalClose(modal, modalContent, closeModal, isOpen)
      }

      triggers.forEach((btn: HTMLElement) =>
        btn.addEventListener('click', openModal)
      )
      closeButton.addEventListener('click', closeModal)
    })
  })
</script>
